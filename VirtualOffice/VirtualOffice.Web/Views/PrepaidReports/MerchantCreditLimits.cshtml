@using ClassLibrary2.Domain
@using VirtualOffice.Web.Infrastructure
@using VirtualOffice.Web.Models
@using VirtualOffice.Web.Models.NewReports
@model VirtualOfficeReportModel
@{
    Layout = "~/Views/Shared/_NewUserLayout.cshtml";

    var columnsCofig = Model.ColumnsConfig;

    var dateRange = Model.DateRange;

    var startDate = dateRange.StartDate;

    var endDate = dateRange.EndDate;
}
<div class="container select" id="main">
    <input id="printLink" type="hidden" value="@Model.PrintLink">
    <input id="storeProcedure" type="hidden" value="@Model.StoreProcedureName">
    <hr />
    <div class="row panel-heading">
        <div class="hidden-xs col-sm-9 col-md-9">
            <h3 class="text-secundary">Merchant Credit Limits</h3>
        </div>
        <div class="col-xs-4 col-sm-3 col-md-3 text-right under15" >
            <a class="btn btn-print btn-sm" id="PrintReportsBtn" onclick="PrintReport(false)"><span class="glyphicon glyphicon-print"></span> Print</a>
            <a id="exportButton" class="btn btn-print btn-sm" onclick="PrintReport(true)"><span class="glyphicon glyphicon-export"></span> Export</a>
        </div>
    </div>
    
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-12" id="sidebar">
            <div class="panel-group" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <a data-toggle="collapse" data-target="#collapse1" class="expand">Elements on Report <span class="glyphicon glyphicon-chevron-down pull-right"></span></a>
                    </div>
                    <div class="panel-body panel-collapse collapse" id="collapse1">
                        <label for="last-visit" class="control-label">Columns to show:</label>
                        <div class="panel-body">
                            <div class="form-group">
                                @foreach (var column in columnsCofig.Keys)
                                {
                                    <div class="checkbox">
                                        <label id=@string.Format("label^{0}", column)>
                                            <span>@Html.CheckBox("columnName^" + column, !columnsCofig[column].Hidden, new { @value = column, onchange = "UpdateDataProjection()" })</span>
                                            <span class="fix_checkbox">@columnsCofig[column].Label</span>
                                        </label>
                                    </div>
                                }
                                <div class="checkbox">
                                    <label class="text-secundary">
                                        @Html.CheckBox("saveOutputAsDefault")<span class="fix_checkbox">Save as default</span>
                                    </label>
                                </div>
                            </div>
                            <div class="">
                                <button type="button" class="btn btn-secundary" onclick="applyUserfilters()">Go!</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    

    <div class="row top20">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <div class="panel panel-default">
                <div class="panel-body-kendo" id="peaceOfShit">
                    @(Html.Kendo().Grid<MerchantCreditLimitResultViewModel>()
                          .Name("Reports")
                          .HtmlAttributes(new { @style = "text-align: left; height: 850px;" }).EnableCustomBinding(true)
                          .Columns(col =>
                          {
                              foreach (var column in columnsCofig.Keys)
                              {
                                  var columnConfig = columnsCofig[column];
                                  var label = columnsCofig[column].Label;
                                  var columnResult = col.Bound(column).Width(columnConfig.Width).Hidden(columnConfig.Hidden).Title(label);

                                  if (!string.IsNullOrEmpty(columnConfig.Link))
                                  {
                                      columnResult = columnResult.ClientTemplate(columnConfig.Link);
                                  }

                                  if (columnConfig.IsDate)
                                      columnResult.Format("{0:dd/MM/yyyy}");

                                  else if (columnConfig.IsNumeric)
                                      columnResult.ClientFooterTemplate("#= kendo.format('{0:n2}', sum)#").FooterHtmlAttributes(new { alignText = "right" }).Format("{0:n2}").HtmlAttributes(new { alignText = "right" });

                              }
                          })
                          .ToolBar(toolbar => toolbar.Save())
                          .Editable(editable => editable.Mode(GridEditMode.InCell)) // Use in-cell editing mode
                          .DataSource(ds => ds.Ajax()
                              .Aggregates(aggregates =>
                              {
                                  foreach (var col in columnsCofig.Where(col => col.Value.IsNumeric))
                                  {
                                      aggregates.Add(col.Key, typeof(double)).Sum();
                                  }
                              })
                              .Batch(true) // Enable batch updates
                              .Model(model =>
                              {
                                  //change to do generic
                                  model.Id(c => c.merchant_pk);
                                  model.Field(c => c.merchant_pk).Editable(false);
                                  model.Field(c => c.mer_name).Editable(false);
                              })
                              .Read(r => r.Action("RunMerchantCreditLimits", "PrepaidReports").Data("getReportParams"))
                              .Update(r => r.Action("UpdateCreditLimit", "PrepaidReports"))
                              .PageSize(100)
                          )
                          .Events(ev => ev.ColumnReorder("saveNewOutPutOrder").ColumnResize("saveColumnWidth"))
                          .Resizable(config => config.Columns(true))
                          .Sortable()
                          .Selectable()
                          .Reorderable(reorder => reorder.Columns(true))
                          .Scrollable(scr => scr.Height(600))
                          .Pageable(pageable => pageable.Refresh(true).PageSizes(new[] { 100, 200, 500 }).ButtonCount(5))
                          .AutoBind(true)
                    )
                </div>


            </div>
        </div>
    </div>

</div> <!-- .container.select#main -->

<script src="~/Scripts/reportManager.js"></script>